{"version":3,"sources":["InputManager.js","WorldEntityTypes.js","WorldLocationHints.js","Entity.js","Player.js","Loot.js","Monster.js","Stairs.js","Spawner.js","WorldMap.js","World.js","ReactRogue.js","App.js","index.js"],"names":["InputManager","observers","handleKeys","e","preventDefault","keyCode","broadcast","x","y","fn","this","push","filter","subscriber","action","data","forEach","document","addEventListener","removeEventListener","WorldEntityTypes","ERROR","NOTHING","WALL","PLAYER","LOOT","GOBLIN","OGRE","ORC","TROLL","STAIRS","UNKNOWN","Object","freeze","WorldLocationHints","TOPLEFTQUAD","TOPRIGHTQUAD","BOTTOMRIGHTQUAD","BOTTOMLEFTQUAD","MIDDLE","RANDOM","Entity","attributes","worldState","verb","console","log","name","context","fillStyle","colour","textBaseline","font","fillText","ascii","size","offset","defaultPlayerAttributes","type","health","Player","inventory","world","dx","dy","worldMap","delete","put","hitObject","whatsAt","addInventory","remove","item","carriedEntity","LootTable","Loot","whatAmI","Math","floor","random","length","MonsterTable","Monster","addToHistory","player","Stairs","newLevel","level","Spawner","spawnCount","locationHint","f_createEntity","count","entity","addWithLocationHint","spawn","WorldMap","width","height","map","Array","cellMap","Map","Cellular","connected","randomize","userCallback","value","create","connect","isNaN","valid","worldLocationHint","xMin","yMin","xMax","yMax","available","randomRange","get","hint","tries","findRandomSpace","min","max","World","tileSize","entities","history","levels","spawner","dx2","dy2","move","collide","levelNum","playerState","assign","levelState","createMap","spawnPlayer","spawnLoot","spawnMonsters","spawnStairs","newMap","optNum","putApproximately","worldEntity","msg","shift","drawWall","drawSpace","draw","fillRect","ReactRogue","canvasRef","useRef","useState","setWorld","inputManager","handleInput","newWorld","movePlayer","useEffect","bindKeys","subscribe","unbindKeys","unsubscribe","ctx","current","getContext","clearRect","ref","style","border","background","index","App","className","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.ac9d52d3.chunk.js","sourcesContent":["\nclass InputManager {\n  observers = [];\n\n  subscribe(fn) {\n    this.observers.push(fn);\n  };\n\n  unsubscribe(fn) {\n    this.observers = this.observers.filter(subscriber=> subscriber !== fn);\n  };\n\n  broadcast(action, data) {\n    this.observers.forEach(subscriber => {\n      subscriber(action, data);\n    });\n  };\n\n  handleKeys = e => {\n    e.preventDefault();\n    switch (e.keyCode) {\n      case 37:\n        this.broadcast('move-left', { x:-1, y:0 });\n        break;\n      case 38:\n        this.broadcast('move-up', { x:0, y:-1 });\n        break;\n      case 39:\n        this.broadcast('move-right', { x:1, y:0 });\n        break;\n      case 40:\n        this.broadcast('move-down', { x:0, y:1 });\n        break;\n      default:\n        break;\n    };\n  };\n\n  bindKeys() {\n    document.addEventListener('keydown', this.handleKeys);\n  };\n\n  unbindKeys() {\n    document.removeEventListener('keydown', this.handleKeys);\n  };\n\n}\n\nexport default InputManager;","\nconst WorldEntityTypes = {\n  ERROR: -1,\n  NOTHING: 0,\n  WALL: 1,\n  PLAYER: 2,\n  LOOT: 3,\n  GOBLIN: 4,\n  OGRE: 5,\n  ORC: 6,\n  TROLL: 7,\n  STAIRS: 99,\n  UNKNOWN: 999\n};\n\nObject.freeze(WorldEntityTypes);\n\nexport default WorldEntityTypes;","\nconst WorldLocationHints = {\n  TOPLEFTQUAD: 1,\n  TOPRIGHTQUAD: 2,\n  BOTTOMRIGHTQUAD: 3,\n  BOTTOMLEFTQUAD: 4,\n  MIDDLE: 5,\n  RANDOM: 999\n};\n\nObject.freeze(WorldLocationHints);\n\nexport default WorldLocationHints;","\nclass Entity {\n  constructor(x, y, attributes) {\n    this.x = x;\n    this.y = y;\n    this.attributes = { ...attributes };\n  };\n\n  collide(x, y, worldState) {\n    this.action('collide', {x: x, y: y}, worldState);\n  }\n\n  action(verb, data, worldState) {\n    console.log(`Verb: ${verb} with data: ${data} unhandled on ${this.attributes ? this.attributes.name : 'no name'}`);\n  };\n\n  draw(context) {\n    context.fillStyle = this.attributes.colour || 'white';\n    context.textBaseline = 'hanging';\n    context.font = '16px Helvetica';\n    context.fillText(\n      this.attributes.ascii, \n      this.x * this.attributes.size + (this.attributes.offset ? this.attributes.offset.x : 0), \n      this.y * this.attributes.size + (this.attributes.offset ? this.attributes.offset.y : 0)\n    );\n  };\n\n};\n\nexport default Entity;\n","import Entity from './Entity';\nimport WorldEntityTypes from './WorldEntityTypes';\n\nconst defaultPlayerAttributes = {\n  type: WorldEntityTypes.PLAYER,\n  name: 'Player',\n  ascii: '@',\n  size: 16,\n  colour: 'orange',\n  health: 10\n}\n\nclass Player extends Entity {\n  constructor(x, y) {\n    super(x, y, defaultPlayerAttributes)\n  }\n\n  inventory = [];\n\n  move(world, dx, dy) {\n    if (this.attributes.health <= 0) return;\n    world.worldMap.delete(this.x, this.y);\n    this.x += dx;\n    this.y += dy;\n    world.worldMap.put(this.x, this.y, this);\n  };\n\n  action(verb, data, worldState) {\n    if (verb === 'collide' ) {\n      const hitObject = worldState.whatsAt(data.x, data.y);\n      switch (hitObject.attributes ? hitObject.attributes.type : hitObject) {\n        case WorldEntityTypes.LOOT: \n          this.addInventory(hitObject);\n          worldState.remove(hitObject);\n          break;\n        case WorldEntityTypes.OGRE:\n        case WorldEntityTypes.ORC:\n        case WorldEntityTypes.GOBLIN:\n        case WorldEntityTypes.TROLL:\n          hitObject.action('hit', {}, worldState);\n          break;\n        case WorldEntityTypes.STAIRS:\n          hitObject.action('interact', {}, worldState);\n        default:\n          break;\n      }\n    }    \n  };\n\n  addInventory(item) {\n    this.inventory.push(item);\n  };\n\n  dropInventory(item) {\n    this.inventory = this.inventory.filter((carriedEntity) => { return carriedEntity !== item; });\n  };\n\n};\n\nexport default Player;\n","import WorldEntityTypes from './WorldEntityTypes';\nimport Entity from './Entity';\n\nconst LootTable = [\n  { type: WorldEntityTypes.LOOT, name: 'Longsword', colour: 'darkgrey', ascii: '/', size: 16, offset: {x: 6, y: 3} },\n  { type: WorldEntityTypes.LOOT, name: 'Health', colour: 'red', ascii: '!', size: 16, offset: {x: 6, y: 3} },\n  { type: WorldEntityTypes.LOOT, name: 'Gold', colour: 'yellow', ascii: '$', size: 16, offset: {x: 3, y: 3} },\n  { type: WorldEntityTypes.LOOT, name: 'Light Armour', colour: 'lightgrey', size: 16, ascii: '#', offset: {x: 4, y: 3} }\n];\n\nclass Loot extends Entity {\n  constructor(x, y) {\n    const whatAmI = LootTable[Math.floor(Math.random() * LootTable.length)];\n    super(x, y, whatAmI);\n  };\n\n};\n\nexport default Loot;\n","import WorldEntityTypes from './WorldEntityTypes';\nimport Entity from './Entity';\n\nconst MonsterTable = [\n  { type: WorldEntityTypes.ORC, name: 'Orc', colour: 'darkgrey', ascii: 'W', size: 16, offset: {x: 6, y: 3}, health: 5 },\n  { type: WorldEntityTypes.OGRE, name: 'Ogre', colour: 'red', ascii: '%', size: 16, offset: {x: 6, y: 3}, health: 6 },\n  { type: WorldEntityTypes.GOBLIN, name: 'Goblin', colour: 'yellow', ascii: '^', size: 16, offset: {x: 3, y: 3}, health: 4 },\n  { type: WorldEntityTypes.TROLL, name: 'Troll', colour: 'lightgrey', size: 16, ascii: '&', offset: {x: 4, y: 3}, health: 9 }\n];\n\nclass Monster extends Entity {\n  constructor(x, y) {\n    const whatAmI = MonsterTable[Math.floor(Math.random() * MonsterTable.length)];\n    super(x, y, whatAmI);\n  };\n\n  action(verb, data, worldState) {\n    switch (verb) {\n      case 'hit':\n        worldState.addToHistory(`Player attacks ${this.attributes.name}!`);\n        this.attributes.health -= 1;\n        if (this.attributes.health <= 0) {\n          worldState.addToHistory(`${this.attributes.name} dies!`);\n          worldState.remove(this);\n        } else {\n          worldState.addToHistory(`${this.attributes.name}'s health = ${this.attributes.health}`);\n        }\n        worldState.player.attributes.health -= 1;\n        if (worldState.player.attributes.health <= 0) {\n          worldState.addToHistory(`That attack drained the last few drops of your life force. The player is dead!`);\n        } else {\n          worldState.addToHistory(`Player health is now ${worldState.player.attributes.health}`);\n        }\n        break;\n      default:\n        break;\n    };\n  };\n};\n\nexport default Monster;\n","import Entity from './Entity';\nimport WorldEntityTypes from './WorldEntityTypes';\n\nconst attributes = {\n  type: WorldEntityTypes.STAIRS,\n  name: 'Stairs',\n  colour: 'black',\n  ascii: 'v',\n  size: 16,\n  offset: { x:2, y:2 }\n};\n\nclass Stairs extends Entity {\n\n  constructor(x, y) {\n    super(x, y, attributes);\n  };\n\n  action (verb, data, worldState) {\n    if (verb === 'interact') {\n      worldState.addToHistory('Descending...');\n      // const savedInventory = worldState.player.inventory;\n      worldState.newLevel(worldState.level - 1);\n      worldState.addToHistory(`Level ${worldState.level}`);\n    }\n  };\n};\n\nexport default Stairs;","import Loot from './Loot';\nimport Monster from './Monster';\nimport Player from './Player';\nimport Stairs from './Stairs';\nimport WorldLocationHints from './WorldLocationHints';\n\nclass Spawner {\n  \n  spawn(world, spawnCount, locationHint, f_createEntity) {\n    for (let count = 0; count < spawnCount; count++) {\n      let entity = f_createEntity();\n      world.addWithLocationHint(entity, locationHint);\n    };\n  };\n\n  spawnPlayer(world) {\n    this.spawn(world, 1, WorldLocationHints.TOPLEFTQUAD, () => {\n      return new Player();\n    });\n  };\n\n  spawnLoot(world, spawnCount) {\n    this.spawn(world, spawnCount, WorldLocationHints.RANDOM, () => {\n      return new Loot();\n    });\n  };\n\n  spawnMonsters(world, spawnCount) {\n    this.spawn(world, spawnCount, WorldLocationHints.RANDOM, () => {\n      return new Monster();\n   });\n  };\n\n  spawnStairs(world, spawnCount) {\n    this.spawn(world, spawnCount, WorldLocationHints.BOTTOMRIGHTQUAD, () => {\n      return new Stairs();\n    });\n  };\n\n}\n\nexport default Spawner;\n","import WorldEntityTypes from \"./WorldEntityTypes\";\nimport { Map } from 'rot-js';\nimport WorldLocationHints from \"./WorldLocationHints\";\n\nclass WorldMap {\n  constructor(width, height) {\n    this.width = width;\n    this.height = height;\n    this.map = new Array(width);\n    for (let x = 0; x < this.width; x++) {\n      this.map[x] = new Array(height);\n    }\n  };\n\n  newMap() {\n    for (let x = 0; x < this.width; x++) {\n      this.map[x] = new Array(this.height);\n    }\n\n    const cellMap = new Map.Cellular(this.width, this.height, {connected: true});\n    cellMap.randomize(0.5);\n    const userCallback = (x,y,value) => {\n      if (x === 0 || y === 0 || x === this.width - 1 || y === this.height - 1) {\n        this.map[x][y] = 1; // walls around the edge of the world\n        return;\n      }\n      this.map[x][y] = value === 0 ? WorldEntityTypes.WALL : WorldEntityTypes.NOTHING;\n    };\n    cellMap.create(userCallback);\n    cellMap.connect(userCallback, 1);\n  };\n\n  valid(x, y) {\n    return (!isNaN(x) && !isNaN(y)) && !(x < 0 || x > this.map.length - 1 || y < 0 || y > this.map[0].length - 1);\n  };\n\n  get(x, y) {\n    if (!this.valid(x, y)) return WorldEntityTypes.ERROR;\n    return this.map[x][y];\n  };\n\n  put(x, y, entity) {\n    if (!this.valid(x, y)) return WorldEntityTypes.ERROR;\n    this.map[x][y] = entity;\n  };\n\n  putApproximately(worldLocationHint, entity) {\n    let xMin = -1;\n    let yMin = -1;\n    let xMax = -1;\n    let yMax = -1;\n\n    switch(worldLocationHint) {\n      case WorldLocationHints.TOPLEFTQUAD:\n        xMin = 1;\n        xMax = Math.floor(this.width / 2);\n        yMin = 1;\n        yMax = Math.floor(this.height / 2);\n        break;\n      case WorldLocationHints.TOPRIGHTQUAD:\n        xMin = Math.floor(this.width / 2);\n        xMax = Math.floor(this.width - 1);\n        yMin = 1;\n        yMax = Math.floor(this.height / 2);\n        break;\n      case WorldLocationHints.BOTTOMRIGHTQUAD:\n        xMin = Math.floor(this.width / 2);\n        xMax = Math.floor(this.width - 1);\n        yMin = Math.floor(this.height / 2);\n        yMax = this.height - 1;\n        break;\n      case WorldLocationHints.BOTTOMLEFTQUAD:\n        xMin = 1;\n        xMax = Math.floor(this.width / 2);\n        yMin = Math.floor(this.height / 2);\n        yMax = Math.floor(this.height - 1);\n        break;\n      case WorldLocationHints.MIDDLE:\n        xMin = Math.floor(this.width / 4);\n        xMax = xMin * 3;\n        yMin = Math.floor(this.height / 4);\n        yMax = yMin * 3;\n        break;\n      case WorldLocationHints.RANDOM:\n        xMin = 1;\n        xMax = this.width - 1;\n        yMin = 1;\n        yMax = this.height - 1;\n        break;\n      default:\n        break;\n    };\n\n    if (xMin < 0 || xMax < 0 || yMin < 0 || yMax < 0) {\n      console.log(`Couldn't determine WorldLocationHint (${worldLocationHint})`);\n      return;\n    }\n\n    let available = false;\n    let x = 0; \n    let y = 0;\n    while (!available) {\n      x = this.randomRange(xMin, xMax);\n      y = this.randomRange(yMin, yMax);\n      if (this.get(x, y) === WorldEntityTypes.NOTHING) {\n        available = true;\n        break;\n      }\n    };\n\n    // we know where the entity is going\n    entity.x = x;\n    entity.y = y;\n    \n    this.put(x, y, entity);\n\n  };\n      \n  delete(x,y) {\n    if (!this.valid(x, y)) return WorldEntityTypes.ERROR;\n    this.map[x][y] = WorldEntityTypes.NOTHING;\n  };\n\n  findRandomSpace(hint) {\n    let x = hint ? this.randomRange(hint.x, this.width) : this.randomRange(0, this.width - 1);\n    let y = hint ? this.randomRange(hint.y, this.height) : this.randomRange(0, this.height - 1);\n    let tries = 0;\n    let searchSpace = 100;\n    let available = false;\n    while (!available && tries < searchSpace) {\n      if (this.get(x, y) === WorldEntityTypes.NOTHING) {\n        available = true;\n        break;\n      }\n      x = this.randomRange(x, this.width - 1);\n      y = this.randomRange(y, this.height - 1);\n      tries++;\n    };\n    return available ? { x: x, y: y } : this.findRandomSpace();\n  };\n\n  randomRange(min, max) {\n    // generate a random number between min and max inclusive\n    return Math.floor(min + Math.random() * (max - min));\n  };\n\n};\n\nexport default WorldMap;","import WorldEntityTypes from './WorldEntityTypes';\nimport WorldLocationHints from './WorldLocationHints';\nimport Player from './Player';\nimport Spawner from './Spawner';\nimport WorldMap from './WorldMap';\n\nclass World {\n  constructor(width, height, tileSize) {\n    this.level = 0;\n    this.width = width;\n    this.height = height;\n    this.tileSize = tileSize;\n    this.entities = [];\n    this.history = [];\n    this.levels = [];\n    this.worldMap = new WorldMap(width, height);\n    this.spawner = new Spawner(this);\n  };\n\n  get player() {\n    return this.entities.filter(entity => entity.attributes.type == WorldEntityTypes.PLAYER )[0];\n  }\n\n  movePlayer(dx, dy) {\n    // where are we headed?\n    const dx2 = dx + this.player.x;\n    const dy2 = dy + this.player.y;\n    // what's there? can we move?\n    const entity = this.worldMap.get(dx2, dy2);\n    switch (entity.attributes ? entity.attributes.type : entity) {\n      case WorldEntityTypes.WALL:\n        break;\n\n      case WorldEntityTypes.NOTHING:\n        this.player.move(this, dx, dy);\n        break;\n\n      case WorldEntityTypes.OGRE:\n      case WorldEntityTypes.ORC:\n      case WorldEntityTypes.GOBLIN:\n      case WorldEntityTypes.TROLL:\n        this.player.collide(dx2, dy2, this);  // <-- world-altering activity\n        break;\n\n      default:\n        this.player.collide(dx2, dy2, this);  // <-- world-altering activity\n        this.player.move(this, dx, dy);\n        break;\n    };\n  };\n\n  whatsAt(x, y) {\n    // worldMap can contain 0 (NOTHING), 1 (WALL), or an Entity type\n    return this.worldMap.get(x, y);\n  };\n\n  newLevel(levelNum) {\n    const playerState = new Player();\n    Object.assign(playerState, this.player);\n    const levelState = new WorldMap();\n    Object.assign(levelState, this.worldMap);\n    this.levels.push({level: this.level, map: levelState});\n    this.level = levelNum;\n    this.createMap();\n    this.spawnPlayer();\n    this.spawnLoot();\n    this.spawnMonsters();\n    this.spawnStairs();\n    this.player.inventory = playerState.inventory;\n  };\n\n  createMap() {\n    this.entities = [];\n    this.worldMap.newMap();\n  };\n\n  spawnPlayer() {\n    this.spawner.spawnPlayer(this, 1);\n  };\n\n  spawnLoot(optNum) {\n    this.spawner.spawnLoot(this, Math.floor(Math.random() * (optNum || 8)));\n  };\n\n  spawnMonsters(optNum) {\n    this.spawner.spawnMonsters(this, Math.floor(Math.random() * (optNum || 8)));\n  };\n\n  spawnStairs(optNum) {\n    this.spawner.spawnStairs(this, optNum || 1);\n  };\n\n  addWithLocationHint(entity, worldLocationHint) {\n    this.worldMap.putApproximately(worldLocationHint || WorldLocationHints.RANDOM, entity);\n    this.entities.push(entity);  \n  };\n\n  add(entity) {\n    this.addWithLocationHint(entity, WorldLocationHints.RANDOM);\n    return true;\n  };\n\n  remove(entity) {\n    this.entities = this.entities.filter(worldEntity => worldEntity !== entity);\n    this.worldMap.delete(entity.x, entity.y);\n  };\n\n  addToHistory(msg) {\n    this.history.push(msg);\n    if (this.history.length > 6) this.history.shift();\n  };\n\n  draw(context) {\n    for (let x = 0; x < this.width; x++) {\n      for (let y = 0; y < this.height; y++) {\n        if (this.worldMap.get(x, y) === WorldEntityTypes.WALL) {\n          this.drawWall(context, x, y);\n        }\n        if (this.worldMap.get(x, y) === WorldEntityTypes.NOTHING) {\n          this.drawSpace(context, x, y);\n        }\n      };\n    };\n    \n    this.entities.forEach(entity => {\n      entity.draw(context);\n    });\n  };\n\n  drawWall(context, x, y) {\n    context.fillStyle = '#000';\n    context.fillRect(\n      x * this.tileSize, \n      y * this.tileSize, \n      this.tileSize, \n      this.tileSize\n    );\n  };\n\n  drawSpace(context, x, y) {\n    context.fillStyle = 'DimGray';\n    context.fillRect(\n      x * this.tileSize, \n      y * this.tileSize, \n      this.tileSize, \n      this.tileSize\n    );\n    context.fillText(\n      ' ', \n      x * this.tileSize, \n      y * this.tileSize, \n    );\n  };\n}\n\nexport default World;\n","import React, { useRef, useEffect, useState } from 'react';\nimport InputManager from './InputManager';\nimport World from './World';\n\nconst ReactRogue = ({width, height, tileSize}) => { \n  const canvasRef = useRef();\n  const [world, setWorld] = useState(new World(width, height, tileSize));\n\n  let inputManager = new InputManager();\n\n  const handleInput = (action, data) => {\n    // console.log(`Handling input... ${action}:${JSON.stringify(data)}`);\n    /* NOTE TO SELF:\n    *    Having to create a new world copy every time an input is processed feels dirty\n    *    I'm assuming there's a better way I don't know about yet\n    */\n    let newWorld = new World();\n    Object.assign(newWorld, world);\n    newWorld.movePlayer(data.x, data.y);\n    setWorld(newWorld);\n  };\n\n  useEffect(() => {\n    // draw the map (for the first time, and once only)\n    let newWorld = new World();\n    Object.assign(newWorld, world);\n    newWorld.createMap();\n    newWorld.spawnPlayer();\n    newWorld.spawnLoot();\n    newWorld.spawnMonsters();\n    newWorld.spawnStairs();\n    newWorld.addToHistory(`Level ${newWorld.level}!`);\n    setWorld(newWorld);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // empty list param to useEffect equates to first time render only (no dependencies) :rolleyes:\n\n  useEffect(() => {\n    // console.log('Bind input');\n    inputManager.bindKeys();\n    inputManager.subscribe(handleInput);\n    // useEffect also returns a function to be called\n    // when the component is closed\n    return () => {\n      inputManager.unbindKeys();\n      inputManager.unsubscribe(handleInput);\n    };\n  });\n\n  useEffect(() => {\n    // console.log(\"Draw to canvas\");\n    const ctx = canvasRef.current.getContext('2d');\n    ctx.clearRect(0, 0, width * tileSize, height * tileSize);\n    world.draw(ctx);\n  });\n\n  return (\n    <>\n      <canvas \n        ref={canvasRef}\n        width={width * tileSize} \n        height={height * tileSize}\n        style={{ border: '1px solid black', background: 'DimGray' }}\n      ></canvas>\n      <ul>\n        { world.player && world.player.inventory.map((item, index) => (<li key={index}>{item.attributes.name}</li>)) }\n      </ul>\n      <ul>\n        { world.history && world.history.map((item, index) => (<li key={index}>{item}</li>)) }\n      </ul>\n    </>\n  );\n};\n\nexport default ReactRogue;\n","import React from 'react';\nimport ReactRogue from './ReactRogue';\n\nconst App = () => (\n  <div className=\"App\">\n    <ReactRogue width={40} height={40} tileSize={16} />\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}